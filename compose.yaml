networks:
  app-network:

services:
  task-app-prod:
    profiles: [ prod ]
    build:
      context: .
      dockerfile: Dockerfile
      args:
        DOCKER_ENV: production
      secrets:
        - aws_region
        - aws_access_key_id
        - aws_secret_access_key
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

  task-app:
    container_name: task-app
    profiles: [ dev ]
    depends_on: 
      dynamodb-local:
        condition: service_healthy
    networks: [ app-network ]
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
      args:
        DOCKER_ENV: development
    environment:
      - NODE_ENV=development
      - PORT=3000
      - AWS_DYNAMODB_ENDPOINT=http://dynamodb-local:8000
    ports:
      - "3003:3000"
    restart: unless-stopped
    volumes:
      - .:/app
      - /app/node_modules
    command: yarn dev
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3003/api/health || exit 1']
      interval: 5s
      timeout: 5s
      retries: 3
    # develop:
    #   watch: 
    #     - path: .
    #       action: rebuild

  dynamodb-local:
    profiles: ["dev"]
    networks: [ app-network ]
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
    healthcheck:
      test: ["CMD-SHELL", 'curl -s http://localhost:8000 > /dev/null || exit 1']
      interval: 5s
      timeout: 5s
      retries: 10


secrets:
  aws_region:
    environment: AWS_REGION
  aws_access_key_id:
    environment: AWS_ACCESS_KEY_ID
  aws_secret_access_key:
    environment: AWS_SECRET_ACCESS_KEY
  aws_s3_bucket:
    environment: AWS_S3_BUCKET
  postgres_user:
    environment: DB_USER
  postgres_password:
    environment: DB_PASSWORD
  postgres_db:
    environment: DB_NAME
